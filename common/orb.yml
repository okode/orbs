version: 2.1

description: |
  Common commands for building Okode projects
  Repository: https://github.com/okode/orbs

cache-key-npm: &cache-key-npm
  key: cache-npm-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "package-lock.json" }}

cache-key-sonar-standalone: &cache-key-sonar-standalone
  key: cache-sonar-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "<< parameters.path >>/sonar-project.properties" }}

cache-key-sonar-gradle: &cache-key-sonar-gradle
  key: cache-sonar-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_BRANCH }}-{{ checksum "<< parameters.path >>/build.gradle" }}

orbs:
  aws-cli: circleci/aws-cli@1.3.1

executors:
  node:
    parameters:
      node-version:
        type: string
        default: '14.15'
    docker:
      - image: cimg/node:<< parameters.node-version >>
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  node-browsers:
    parameters:
      node-version:
        type: string
        default: '14'
    docker:
      - image: circleci/node:<< parameters.node-version >>-browsers
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  node-machine:
    machine:
      image: ubuntu-2004:202010-01
  java:
    docker:
      - image: cimg/openjdk:15.0-node
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
  python:
    docker:
      - image: cimg/python:3.9
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
commands:
  install-ios:
    description: Install iOS requirements
    parameters:
      cordova-version:
        type: string
        default: 'latest'
      cocoapods-version:
        type: string
        default: ''
      fastlane-version:
        type: string
        default: ''
    steps:
      - run:
          name: Installing Ionic and Firebase tools
          command: |
            npm i --quiet -g @ionic/cli firebase-tools
      - run:
          name: Installing Cordova
          command: |
            npm i --quiet -g cordova@<< parameters.cordova-version >>
      - when:
          condition:
            and:
              - not:
                  equal: [ 'latest', << parameters.cocoapods-version >> ]
              - not:
                  equal: [ '', << parameters.cocoapods-version >> ]
          steps:
            - run:
                name: Installing Cocoapods version << parameters.cocoapods-version >>
                command: |
                  sudo gem install cocoapods -v << parameters.cocoapods-version >>
      - when:
          condition:
            equal: [ 'latest', << parameters.cocoapods-version >> ]
          steps:
            - run:
                name: Installing Cocoapods latest version
                command: |
                  sudo gem install cocoapods
      - when:
          condition:
            and:
              - not:
                  equal: [ 'latest', << parameters.fastlane-version >> ]
              - not:
                  equal: [ '', << parameters.fastlane-version >> ]
          steps:
            - run:
                name: Installing Fastlane version << parameters.fastlane-version >>
                command: |
                  sudo gem install fastlane -v << parameters.fastlane-version >>
      - when:
          condition:
            equal: [ 'latest', << parameters.fastlane-version >> ]
          steps:
            - run:
                name: Installing Fastlane latest version
                command: |
                  sudo gem install fastlane
  install-android:
    description: Install Android requirements
    parameters:
      cordova-version:
        type: string
        default: 'latest'
      gradle-version:
        type: string
        default: ''
      skip-upgrade-android-sdk:
        type: boolean
        default: false
    steps:
      - run:
          name: Installing SDKMAN!
          command: |
            curl -s "https://get.sdkman.io?rcupdate=false" | bash
            echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
      - run:
          name: Installing Gradle
          command: |
            sdk install gradle << parameters.gradle-version >>
      - unless:
          condition: << parameters.skip-upgrade-android-sdk >>
          steps:
            - run:
                name: Installing Android Platform 28
                command: |
                  yes | sdkmanager "platforms;android-28" || true
      - run:
          name: Installing Ionic and Cordova
          command: sudo npm i --quiet -g @ionic/cli cordova@<< parameters.cordova-version >>
      - run:
          name: Installing Firebase
          command: |
            sudo chown -R $(whoami) /usr/local/lib/node_modules
            sudo chown -R $(whoami) /usr/local/bin
            npm i --quiet -g firebase-tools
      - run:
          name: Installing Fastlane
          command: |
            if [[ $CIRCLE_TAG == *-dist ]]; then
              gem install fastlane -NV
            fi
  vpn:
    description: Start VPN connection
    parameters:
      user:
        type: string
      password:
        type: string
      config:
        type: string
    steps:
     - run:
        name: Starting VPN connection
        command: |
          wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg > /tmp/repo-public.gpg
          sudo apt-key add /tmp/repo-public.gpg
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/dpkg/lock
          sudo dpkg --configure -a
          sudo bash -c 'echo "deb http://build.openvpn.net/debian/openvpn/release/2.4 trusty main" > /etc/apt/sources.list.d/openvpn-aptrepo.list'
          sudo apt-get update || true
          sudo apt-get install openvpn
          echo "<< parameters.config >>" > /tmp/vpn.conf
          echo "<< parameters.user >>" > /tmp/auth.txt
          echo "<< parameters.password >>" >> /tmp/auth.txt
          sudo bash -c "base64 -d /tmp/vpn.conf > /etc/openvpn/vpn.conf"
          sudo cp /tmp/auth.txt /etc/openvpn/auth.txt
          rm -f /tmp/vpn.conf /tmp/auth.txt
          sudo openvpn --daemon --config /etc/openvpn/vpn.conf
          sleep 10
  bitbucket-downloads:
    description: Upload artifacts to BitBucket Downloads
    parameters:
      auth-string:
        type: string
      group:
        type: string
      repo:
        type: string
      tag:
        type: string
      path:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Uploading artifacts to BitBucket Downloads
          command: |
            cd /tmp/workspace/<< parameters.path >>
            for FILE in *.ipa; do mv ${FILE} $(basename ${FILE} .ipa)-<< parameters.tag >>.ipa; done
            for FILE in *.apk; do mv ${FILE} $(basename ${FILE} .apk)-<< parameters.tag >>.apk; done
            for FILE in *; do curl -X POST "https://<< parameters.auth-string >>@api.bitbucket.org/2.0/repositories/<< parameters.group >>/<< parameters.repo >>/downloads" --form files=@"${FILE}"; done
  sonar:
    parameters:
      scanner:
        type: enum
        default: "standalone"
        description: The way of running the Sonar analysis. It could be 'standalone' (running the analysis using the sonar-scanner.jar) or 'gradle' (using the 'sonarqube' gradle plugin of a build.gradle file).
        enum: ["standalone", "gradle"]
      path:
        type: string
        default: .
        description: The path to run the Sonar analysis on. This will set the 'working_directory' of the Sonar analysis steps, not the entire job one. The 'attach_workspace' step will be set at this path.
      attach-workspace:
        type: boolean
        default: false
        description: This will attach the workspace on the 'path' parameter.
    description: Running Sonar scanner
    steps:
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: << parameters.path >>
      - when:
          condition: 
            equal: [ 'standalone', << parameters.scanner >> ]
          steps:
            - run:
                name: Standalone Scanner
                command: echo "Standalone scanner selected running on $(pwd)"
                working_directory: << parameters.path >>
            - run:
                name: Downloading Sonar scanner
                command: curl -L https://repo1.maven.org/maven2/org/sonarsource/scanner/cli/sonar-scanner-cli/4.5.0.2216/sonar-scanner-cli-4.5.0.2216.jar > sonar-scanner.jar
                working_directory: << parameters.path >>
            - restore_cache:
                << : *cache-key-sonar-standalone
            - run:
                name: Upgrading TypeScript
                command: npm i typescript@latest
                working_directory: << parameters.path >>
            - run:
                name: Scanning
                command: java -jar sonar-scanner.jar
                working_directory: << parameters.path >>
            - save_cache:
                << : *cache-key-sonar-standalone
                paths:
                  - ~/.sonar
      - when:
          condition: 
            equal: [ 'gradle', << parameters.scanner >> ]
          steps:
            - run:
                name: Gradle Scanner
                command: echo "Gradle scanner selected running on $(pwd)"
                working_directory: << parameters.path >>
            - restore_cache:
                << : *cache-key-sonar-gradle
            - run:
                name: Scanning
                command: ./gradlew sonarqube -x test
                working_directory: << parameters.path >>
            - save_cache:
                << : *cache-key-sonar-gradle
                paths:
                  - ~/.sonar
  npm-install:
    description: Running npm install
    steps:
      - restore_cache:
          << : *cache-key-npm
      - run:
          name: Installing NPM dependencies
          command: if [ ! -d "node_modules" ]; then npm ci; fi
      - run:
          name: Restoring package-lock.json
          command: git checkout package-lock.json
      - save_cache:
          << : *cache-key-npm
          paths:
            - node_modules
  chrome-upgrade:
    description: Upgrading Chrome
    steps:
      - run:
          name: Upgrading Chrome
          command: |
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get install google-chrome-stable
  sentry-release:
    description: Create Sentry release and uploads sourcemaps from PWA
    parameters:
      org:
        type: string
      project:
        type: string
      auth-token:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Installing Sentry CLI
          command: sudo npm i -g @sentry/cli --quiet --unsafe-perm
      - run:
          name: Creating Sentry release and uploading sourcemaps
          environment:
            SENTRY_ORG: << parameters.org >>
            SENTRY_PROJECT: << parameters.project >>
          command: |
            cd /tmp/workspace/www
            VERSIONENVIRONMENT=${CIRCLE_TAG%-dist}
            ENVIRONMENT=${VERSIONENVIRONMENT#*-}
            VERSION=${VERSIONENVIRONMENT%-$ENVIRONMENT}
            if [[ $CIRCLE_TAG == *-dist ]]; then VERSION=${VERSION}-dist; else VERSION=${CIRCLE_TAG}; fi
            sentry-cli --auth-token << parameters.auth-token >> releases new $VERSION
            sentry-cli --auth-token << parameters.auth-token >> releases files $VERSION upload-sourcemaps . --no-rewrite
            sentry-cli --auth-token << parameters.auth-token >> releases set-commits $VERSION --commit "okode/<< parameters.project >>@$CIRCLE_SHA1" || true
            if [[ $CIRCLE_TAG == *-dist ]]; then sentry-cli --auth-token << parameters.auth-token >> releases deploys $VERSION new -e $ENVIRONMENT; fi
            sentry-cli --auth-token << parameters.auth-token >> releases finalize $VERSION
  keychain:
    description: Installs iOS certificates
    parameters:
      package-name:
        type: string
      team-id:
        type: string
      development-provisioning-name:
        type: string
      distribution-provisioning-name:
        type: string
      development-signing-password:
        type: string
      distribution-signing-password:
        type: string
      dev-certs-repo-url:
        type: string
        default: ''
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
    steps:
      - when:
          condition: << parameters.ssh-permission-fingerprint >>
          steps:
            - add_ssh_keys:
                fingerprints:
                  - "<< parameters.ssh-permission-fingerprint >>"
      - run:
          name: Installing iOS certificates
          command: |
            KEY_CHAIN=ios-build.keychain
            KEY_CHAIN_PASS=circleci
            CERT_DIR=certs
            security create-keychain -p ${KEY_CHAIN_PASS} ${KEY_CHAIN}
            security unlock-keychain -p ${KEY_CHAIN_PASS} ${KEY_CHAIN}
            security set-keychain-settings -t 3600 -u ${KEY_CHAIN}
            security list-keychains -s ${KEY_CHAIN}
            security default-keychain -s ${KEY_CHAIN}
            if [ -z "<< parameters.dev-certs-repo-url >>" ] || [ -z "<< parameters.dist-certs-repo-url >>" ]; then
              curl https://developer.apple.com/certificationauthority/AppleWWDRCA.cer > ${CERT_DIR}/AppleWWDRCA.cer
              curl https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer > ${CERT_DIR}/AppleWWDRCAG3.cer
              security import ${CERT_DIR}/AppleWWDRCA.cer -k ${KEY_CHAIN} -T /usr/bin/codesign
              security import ${CERT_DIR}/AppleWWDRCAG3.cer -k ${KEY_CHAIN} -T /usr/bin/codesign
              security import ${CERT_DIR}/development.p12 -k ${KEY_CHAIN} -P << parameters.development-signing-password >> -A
              security import ${CERT_DIR}/distribution.p12 -k ${KEY_CHAIN} -P << parameters.distribution-signing-password >> -A
            else
              rm -rf ${CERT_DIR}
              DIST=false
              if [[ $CIRCLE_TAG == *-dist ]]; then
                git clone --quiet --depth=1 << parameters.dist-certs-repo-url >> ${CERT_DIR}
                DIST=true
              else
                git clone --quiet --depth=1 << parameters.dev-certs-repo-url >> ${CERT_DIR}
              fi
              curl https://developer.apple.com/certificationauthority/AppleWWDRCA.cer > ${CERT_DIR}/AppleWWDRCA.cer
              curl https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer > ${CERT_DIR}/AppleWWDRCAG3.cer
              security import ${CERT_DIR}/AppleWWDRCA.cer -k ${KEY_CHAIN} -T /usr/bin/codesign
              security import ${CERT_DIR}/AppleWWDRCAG3.cer -k ${KEY_CHAIN} -T /usr/bin/codesign
              CERT=$(jq -r --arg teamId "<< parameters.team-id >>" --argjson dist $DIST '.[] | select(.teamId == $teamId and .distribution == $dist) | .name' ${CERT_DIR}/certificates.json)
              CERT_PASS=$(jq -r --arg cert "$CERT" '.[] | select(.name == $cert) | .password' ${CERT_DIR}/certificates.json)
              security import ${CERT_DIR}/${CERT}.p12 -k ${KEY_CHAIN} -P ${CERT_PASS} -A \;
            fi
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${KEY_CHAIN_PASS} ${KEY_CHAIN}

            LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 fastlane produce  \
            --app_identifier "<< parameters.package-name >>"      \
            --team_id "<< parameters.team-id >>"                  \
            --app_name "${CIRCLE_PROJECT_REPONAME}"               \
            --skip_itc || true

            if [[ $CIRCLE_TAG == *-dist ]]; then
              LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 fastlane sigh --force                \
                --app_identifier "<< parameters.package-name >>"                       \
                --provisioning_name "<< parameters.distribution-provisioning-name >>"  \
                --team_id "<< parameters.team-id >>"
            else
              LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 fastlane sigh --force --development  \
              --app_identifier "<< parameters.package-name >>"                         \
              --provisioning_name "<< parameters.development-provisioning-name >>"     \
              --team_id "<< parameters.team-id >>"
            fi
  keystores:
    description: Retrieves Android keystores
    parameters:
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
    steps:
      - when:
          condition: << parameters.ssh-permission-fingerprint >>
          steps:
            - add_ssh_keys:
                fingerprints:
                  - "<< parameters.ssh-permission-fingerprint >>"
      - run:
          name: Getting Android distribution keystore (if needed)
          command: |
            if [[ $CIRCLE_TAG == *-dist ]] && [[ -n "<< parameters.dist-certs-repo-url >>" ]]; then
              CERT_DIR=certs
              rm -rf ${CERT_DIR}
              git clone --quiet --depth=1 << parameters.dist-certs-repo-url >> ${CERT_DIR}
              STORE_PASS=$(jq -r '[.[] | select(.distribution == true) | .storePassword][0]' ${CERT_DIR}/keystores.json)
              KEYSTORE_PASS=$(jq -r '[.[] | select(.distribution == true) | .password][0]' ${CERT_DIR}/keystores.json)
              sed -i 's/KEYSTORE_STORE_PASS_PLACEHOLDER/'"$STORE_PASS"'/' build.json
              sed -i 's/KEYSTORE_PASS_PLACEHOLDER/'"$KEYSTORE_PASS"'/' build.json
            fi
  custom-npm-login:
    description: Logins with custom NPM registry
    steps:
      - run:
          name: Installing NPM CLI Login
          command: npm install -g npm-cli-adduser
      - run:
          name: Authenticating NPM
          command: npm-cli-adduser
  force-angular-devkit-parallel:
    description: Force parallel value for Angular DevKit
    parameters:
      parallel:
        type: string
    steps:
      - run:
          name: Forcing parallel value to << parameters.parallel >>
          command: |
            npx replace-in-files-cli --string='parallel: true' --replacement='parallel: << parameters.parallel >>' 'node_modules/**/*webpack*/**/*'
            grep -Ri "parallel: " node_modules

jobs:
  sentry-release:
    description: Create Sentry release and uploads sourcemaps from bundle
    parameters:
      org:
        type: string
      project:
        type: string
      auth-token:
        type: string
    executor: node
    steps:
      - sentry-release:
          org: << parameters.org >>
          project: << parameters.project >>
          auth-token: << parameters.auth-token >>
  bitbucket-downloads:
    description: Upload artifacts to BitBucket Downloads
    parameters:
      auth-string:
        type: string
      group:
        type: string
      repo:
        type: string
      tag:
        type: string
      path:
        type: string
    executor: node
    steps:
      - bitbucket-downloads:
          auth-string: << parameters.auth-string >>
          group: << parameters.group >>
          repo: << parameters.repo >>
          tag: << parameters.tag >>
          path: << parameters.path >>
  sonar:
    description: Run Sonar scanner
    parameters:
      scanner:
        type: enum
        default: 'standalone'
        description: The way of running the Sonar analysis. It could be 'standalone' (running the analysis using the sonar-scanner.jar) or 'gradle' (using the 'sonarqube' gradle plugin of a build.gradle file).
        enum: [ 'standalone', 'gradle' ]
      path:
        type: string
        default: .
        description: The path to run the Sonar analysis on. This will set the 'working_directory' of the Sonar analysis steps, not the entire job one. The 'attach_workspace' step will be set at this path.
      attach-workspace:
        type: boolean
        default: false
        description: This will attach the workspace on the 'path' parameter.
    executor: java
    resource_class: xlarge
    steps:
      - checkout
      - sonar:
          scanner: << parameters.scanner >>
          path: << parameters.path >>
          attach-workspace: << parameters.attach-workspace >>
  sonar-vpn:
    description: Run Sonar scanner with VPN
    machine: true
    parameters:
      user:
        type: string
      password:
        type: string
      config:
        type: string
      scanner:
        type: enum
        default: 'standalone'
        description: The way of running the Sonar analysis. It could be 'standalone' (running the analysis using the sonar-scanner.jar) or 'gradle' (using the 'sonarqube' gradle plugin of a build.gradle file).
        enum: [ 'standalone', 'gradle' ]
      path:
        type: string
        default: .
        description: The path to run the Sonar analysis on. This will set the 'working_directory' of the Sonar analysis steps, not the entire job one. The 'attach_workspace' step will be set at this path.
      attach-workspace:
        type: boolean
        default: false
        description: This will attach the workspace on the 'path' parameter.
    steps:
      - checkout
      - vpn:
          user: << parameters.user >>
          password: << parameters.password >>
          config: << parameters.config >>
      - sonar:
          scanner: << parameters.scanner >>
          path: << parameters.path >>
          attach-workspace: << parameters.attach-workspace >>
  s3-sync:
    description: Publish contents to AWS S3 and optionally invalidate CloudFront
    parameters:
      from:
        type: string
        default: 'www'
      to:
        type: string
      distribution-id:
        type: string
        default: ''
      invalidate-paths:
        type: string
        default: '"/index.html" "/assets/environments.json"'
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Syncing contents to S3
          command: aws s3 sync /tmp/workspace/<< parameters.from >> << parameters.to >> --delete
      - when:
          condition: << parameters.distribution-id >>
          steps:
            - run:
                name: Invalidating CloudFront cache
                command: |
                  aws cloudfront create-invalidation \
                  --distribution-id << parameters.distribution-id >> \
                  --paths << parameters.invalidate-paths >>
