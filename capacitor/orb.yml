version: 2.1

description: |
  Build and publish hybrid Apps for iOS / Android
  Repository: https://github.com/okode/orbs

orbs:
  common: okode/common@dev:first
  android: circleci/android@2
  gradle: circleci/gradle@2
  node: circleci/node@5

jobs:
  ios:
    parameters:
      attach-workspace:
        type: boolean
        default: false
      node-version:
        type: string
        default: '18'
      cocoapods-version:
        type: string
        default: ''
      fastlane-version:
        type: string
        default: ''
      xcode-version:
        type: string
        default: '14.3.1'
      ssh-permission-fingerprint:
        type: string
        default: ''
      custom-npm-login:
        type: boolean
        default: false
      pwa-path:
        type: string
        default: 'www'
      skip-inline-sourcemaps:
        type: boolean
        default: false
    executor:
      name: common/node-mac-machine
      xcode-version: << parameters.xcode-version >>
    steps:
      - checkout
      - when:
          condition: << parameters.ssh-permission-fingerprint >>
          steps:
            - add_ssh_keys:
                fingerprints:
                  - '<< parameters.ssh-permission-fingerprint >>'
      - when:
          condition: << parameters.node-version >>
          steps:
            - node/install:
                node-version: << parameters.node-version >>
      - when:
          condition: << parameters.custom-npm-login >>
          steps:
            - common/custom-npm-login
      - node/install-packages:
          cache-version: v3-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - install-ios:
          cocoapods-version: << parameters.cocoapods-version >>
          fastlane-version: << parameters.fastlane-version >>
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: .
            - unless:
                condition: << parameters.skip-inline-sourcemaps >>
                steps:
                  - run:
                      name: Inlining sourcemaps
                      command: |
                        if [[ $CIRCLE_TAG != *-dist ]]; then
                          echo "
                            \"use strict\";
                            exports.__esModule = true;
                            var fs_1 = require(\"fs\");
                            var replace_in_file_1 = require(\"replace-in-file\");
                            process.chdir('www');
                            (0, fs_1.readdirSync)('.')
                                .filter(function (fname) { return fname.endsWith('.js') && (0, fs_1.existsSync)(fname + '.map'); })
                                .map(function (fname) { return { js: fname, jsmap: fname + '.map' }; })
                                .forEach(function (pair) {
                                (0, replace_in_file_1.replaceInFileSync)({
                                    files: pair.js,
                                    from: 'sourceMappingURL=' + pair.js + '.map',
                                    to: 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + (0, fs_1.readFileSync)(pair.jsmap).toString('base64')
                                })
                                    .filter(function (res) { return res.hasChanged; })
                                    .forEach(function (res) { console.log('Inlined sourceMappingURL as base64 in ' + res.file); });
                            });
                            process.chdir(__dirname);
                          " > inline-sourcemaps.js
                          npm i --no-save replace-in-file | true
                          node inline-sourcemaps.js
                        fi
            - run:
                name: Clearing sourcemaps
                command: find << parameters.pwa-path >> -name *.map -type f -delete
      - run:
          name: Syncing Capacitor project
          command: npx cap sync ios
      - run:
          name: Building
          command: |
            if [[ $CIRCLE_TAG = *-dist ]]; then
              export BUILD_TYPE=release
              export MATCH_PASSWORD=$MATCH_PASSWORD_DIST
            else
              export BUILD_TYPE=beta
            fi
            bundle install && bundle exec fastlane ios ${BUILD_TYPE} distribute:true
          no_output_timeout: 30m
      - persist_to_workspace:
          root: .
          paths:
            - artifacts/*.ipa
      - common/notify
  android:
    parameters:
      attach-workspace:
        type: boolean
        default: false
      node-version:
        type: string
        default: '18'
      key-name:
        type: string
        default: android-release.keystore
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
      custom-npm-login:
        type: boolean
        default: false
      pwa-path:
        type: string
        default: 'www'
      android-docker-tag:
        type: string
        default: '2023.08.1-node'
      build-tools-version:
        type: string
        default: ''
      skip-inline-sourcemaps:
        type: boolean
        default: false
      resource-class:
        type: string
        default: medium
    resource_class: << parameters.resource-class >>
    executor:
      name: android/android-docker
      tag: << parameters.android-docker-tag >>
    steps:
      - checkout
      - when:
          condition: << parameters.build-tools-version >>
          steps:
            - run:
                name: Installing required Android Build Tools version
                command: |
                  BUILD_TOOLS_VERSION=$(sdkmanager --list_installed | grep -e "build-tools" | grep -Po "(?<=\|).*?(?=\|)" | head -n 1 | xargs)
                  sdkmanager --uninstall "build-tools;$BUILD_TOOLS_VERSION"
                  sdkmanager --install "build-tools;<< parameters.build-tools-version >>"
      - run:
          name: Fix Android build-tools installation
          shell: /bin/bash
          command: |
            if [ -z "<< parameters.build-tools-version >>" ]; then
              BUILD_TOOLS_VERSION=$(sdkmanager --list_installed | grep -e "build-tools" | grep -Po "(?<=\|).*?(?=\|)" | head -n 1 | xargs)
              BUILD_TOOLS_VERSION=$(echo "$BUILD_TOOLS_VERSION" | tr ' ' '-')
            else
              BUILD_TOOLS_VERSION=<< parameters.build-tools-version >>
            fi
            cp /home/circleci/android-sdk/build-tools/$BUILD_TOOLS_VERSION/d8 /home/circleci/android-sdk/build-tools/$BUILD_TOOLS_VERSION/dx
            cp /home/circleci/android-sdk/build-tools/$BUILD_TOOLS_VERSION/lib/d8.jar /home/circleci/android-sdk/build-tools/$BUILD_TOOLS_VERSION/lib/dx.jar
      - run:
          name: Fix Ruby Gems permissions
          command: sudo chown -R $(whoami) /var/lib/gems
      - node/install:
          node-version: << parameters.node-version >>
      - when:
          condition: << parameters.custom-npm-login >>
          steps:
            - common/custom-npm-login
      - node/install-packages:
          cache-version: v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Installing Fastlane
          command: sudo gem install fastlane -NV
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: .
            - unless:
                condition: << parameters.skip-inline-sourcemaps >>
                steps:
                  - run:
                      name: Inlining sourcemaps
                      command: |
                        if [[ $CIRCLE_TAG != *-dist ]]; then
                          echo "
                            \"use strict\";
                            exports.__esModule = true;
                            var fs_1 = require(\"fs\");
                            var replace_in_file_1 = require(\"replace-in-file\");
                            process.chdir('www');
                            (0, fs_1.readdirSync)('.')
                                .filter(function (fname) { return fname.endsWith('.js') && (0, fs_1.existsSync)(fname + '.map'); })
                                .map(function (fname) { return { js: fname, jsmap: fname + '.map' }; })
                                .forEach(function (pair) {
                                (0, replace_in_file_1.replaceInFileSync)({
                                    files: pair.js,
                                    from: 'sourceMappingURL=' + pair.js + '.map',
                                    to: 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + (0, fs_1.readFileSync)(pair.jsmap).toString('base64')
                                })
                                    .filter(function (res) { return res.hasChanged; })
                                    .forEach(function (res) { console.log('Inlined sourceMappingURL as base64 in ' + res.file); });
                            });
                            process.chdir(__dirname);
                          " > inline-sourcemaps.js
                          npm i --no-save replace-in-file | true
                          node inline-sourcemaps.js
                        fi
            - run:
                name: Clearing sourcemaps
                command: find << parameters.pwa-path >> -name *.map -type f -delete
      - common/keystores:
          dist-certs-repo-url: << parameters.dist-certs-repo-url >>
          ssh-permission-fingerprint: << parameters.ssh-permission-fingerprint >>
          key-name: << parameters.key-name >>
      - run:
          name: Syncing Capacitor project
          command: npx cap sync android
      - gradle/with_cache:
          steps:
            - run:
                name: Building
                command: |
                  if [[ $CIRCLE_TAG = *-dist ]]; then
                    export BUILD_TYPE=release

                    echo "export GOOGLE_APPLICATION_CREDENTIALS=$(mktemp)" >> $BASH_ENV
                    source $BASH_ENV
                    GOOGLE_APPLICATION_CREDENTIALS_JSON=$(echo $GOOGLE_APPLICATION_CREDENTIALS_B64 | base64 --decode)
                    printf '%s\n' "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > $GOOGLE_APPLICATION_CREDENTIALS

                    echo "${GOOGLEPLAY_AUTH_JSON}" > gplay.json
                  else
                    export BUILD_TYPE=beta
                  fi
                  bundle install && bundle exec fastlane android ${BUILD_TYPE} distribute:true
                no_output_timeout: 30m
      - persist_to_workspace:
          root: .
          paths:
            - artifacts/*.apk
            - artifacts/*.aab
      - common/notify

commands:
  install-ios:
    description: ...
    parameters:
      cocoapods-version:
        type: string
        default: ''
      fastlane-version:
        type: string
        default: ''
    steps:
      - when:
          condition:
            and:
              - not:
                  equal: [ 'latest', << parameters.cocoapods-version >> ]
              - not:
                  equal: [ '', << parameters.cocoapods-version >> ]
          steps:
            - run:
                name: Installing Cocoapods version << parameters.cocoapods-version >>
                command: |
                  sudo gem install cocoapods -v << parameters.cocoapods-version >>
      - when:
          condition:
            equal: [ 'latest', << parameters.cocoapods-version >> ]
          steps:
            - run:
                name: Installing Cocoapods latest version
                command: |
                  sudo gem install cocoapods
      - when:
          condition:
            and:
              - not:
                  equal: [ 'latest', << parameters.fastlane-version >> ]
              - not:
                  equal: [ '', << parameters.fastlane-version >> ]
          steps:
            - run:
                name: Installing Fastlane version << parameters.fastlane-version >>
                command: |
                  sudo gem install fastlane -v << parameters.fastlane-version >>
      - when:
          condition:
            equal: [ 'latest', << parameters.fastlane-version >> ]
          steps:
            - run:
                name: Installing Fastlane latest version
                command: |
                  sudo gem install fastlane
