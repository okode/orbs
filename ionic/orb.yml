version: 2.1

description: |
  Build and publish hybrid Apps for iOS / Android
  Repository: https://github.com/okode/orbs

cache-key-cordova-plugins: &cache-key-cordova-plugins
  key: cache-cordova-{{ .Environment.CIRCLE_JOB }}-plugins-{{ checksum "package-lock.json" }}

orbs:
  common: okode/common@2
  android: circleci/android@2
  gradle: circleci/gradle@2
  node: circleci/node@5
  browser-tools: circleci/browser-tools@1

jobs:
  test:
    parameters:
      node-version:
        type: string
        default: ''
      skip-tests:
        type: boolean
        default: false
      skip-lint:
        type: boolean
        default: false
      skip-e2e:
        type: boolean
        default: false
      custom-npm-login:
        type: boolean
        default: false
      chrome-version:
        type: string
        default: 'latest'
      executor:
        type: executor
        default: common/node-browsers
    executor: << parameters.executor >>
    steps:
      - checkout
      - browser-tools/install-browser-tools:
          chrome-version: << parameters.chrome-version >>
          install-firefox: false
          install-geckodriver: false
      - when:
          condition: << parameters.node-version >>
          steps:
            - node/install:
                node-version: << parameters.node-version >>
      - when: 
          condition: << parameters.custom-npm-login >>
          steps:
            - common/fix-node-permissions
            - common/custom-npm-login
      - node/install-packages
      - run:
          name: Type checking
          command: npm run build
      - unless:
          condition: << parameters.skip-lint >>
          steps:
            - run:
                name: Linting
                command: npx ng lint --force --format=json > lint-results.json
      - unless:
          condition: << parameters.skip-tests >>
          steps:
            - run:
                name: Unit testing
                command: npm run test -- --configuration=ci
            - unless:
                condition: << parameters.skip-e2e >>
                steps:
                  - run:
                      name: E2E testing
                      command: npm run e2e
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - test-results
            - lint-results.json
            - coverage
            - www
      - common/notify
  pwa:
    parameters:
      node-version:
        type: string
        default: '16'
      custom-npm-login:
        type: boolean
        default: false
      build-params:
        type: string
        default: '-- --prod'
      pwa-path:
        type: string
        default: 'www'
      skip-inline-sourcemaps:
        type: boolean
        default: false
      executor:
        type: executor
        default: common/node
    executor: << parameters.executor >>
    steps:
      - common/expand-environment
      - checkout
      - when:
          condition: << parameters.node-version >>
          steps:
            - node/install:
                node-version: << parameters.node-version >>
      - when:
          condition: << parameters.custom-npm-login >>
          steps:
            - common/fix-node-permissions
            - common/custom-npm-login
      - node/install-packages
      - run:
          name: Building
          command: npm run build << parameters.build-params >>
          no_output_timeout: 30m
      
      - run:
          name: Packaging
          command: |
            mkdir -p output
            zip -r output/pwa.zip << parameters.pwa-path >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.pwa-path >>
            - output/pwa.zip
      - common/notify
  ios:
    parameters:
      package-name:
        type: string
      team-id:
        type: string
      attach-workspace:
        type: boolean
        default: false
      development-provisioning-name:
        type: string
      distribution-provisioning-name:
        type: string
      development-signing-password:
        type: string
        default: ''
      distribution-signing-password:
        type: string
        default: ''
      node-version:
        type: string
        default: '16'
      cordova-version:
        type: string
        default: ''
      cocoapods-version:
        type: string
        default: ''
      fastlane-version:
        type: string
        default: ''
      xcode-version:
        type: string
        default: '14.2.0'
      dev-certs-repo-url:
        type: string
        default: ''
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
      custom-npm-login:
        type: boolean
        default: false
      pwa-path:
        type: string
        default: 'www'
      cache-cordova-plugins:
        type: boolean
        default: false
      skip-inline-sourcemaps:
        type: boolean
        default: false
    executor:
      name: common/node-mac-machine
      xcode-version: << parameters.xcode-version >>
    steps:
      - checkout
      - when:
          condition: << parameters.node-version >>
          steps:
            - node/install:
                node-version: << parameters.node-version >>
      - when:
          condition: << parameters.custom-npm-login >>
          steps:
            - common/custom-npm-login
      - node/install-packages:
          cache-version: v3-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - common/install-ios:
          cordova-version: << parameters.cordova-version >>
          cocoapods-version: << parameters.cocoapods-version >>
          fastlane-version: << parameters.fastlane-version >>
      - common/keychain:
          package-name: << parameters.package-name >>
          team-id: << parameters.team-id >>
          development-provisioning-name: << parameters.development-provisioning-name >>
          distribution-provisioning-name: << parameters.distribution-provisioning-name >>
          development-signing-password: << parameters.development-signing-password >>
          distribution-signing-password: << parameters.distribution-signing-password >>
          dev-certs-repo-url: << parameters.dev-certs-repo-url >>
          dist-certs-repo-url: << parameters.dist-certs-repo-url >>
          ssh-permission-fingerprint: << parameters.ssh-permission-fingerprint >>
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: .
            - unless:
                condition: << parameters.skip-inline-sourcemaps >>
                steps:
                  - run:
                      name: Inlining sourcemaps
                      command: |
                        if [[ $CIRCLE_TAG != *-dist ]]; then
                          echo "
                            \"use strict\";
                            exports.__esModule = true;
                            var fs_1 = require(\"fs\");
                            var replace_in_file_1 = require(\"replace-in-file\");
                            process.chdir('www');
                            (0, fs_1.readdirSync)('.')
                                .filter(function (fname) { return fname.endsWith('.js') && (0, fs_1.existsSync)(fname + '.map'); })
                                .map(function (fname) { return { js: fname, jsmap: fname + '.map' }; })
                                .forEach(function (pair) {
                                (0, replace_in_file_1.replaceInFileSync)({
                                    files: pair.js,
                                    from: 'sourceMappingURL=' + pair.js + '.map',
                                    to: 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + (0, fs_1.readFileSync)(pair.jsmap).toString('base64')
                                })
                                    .filter(function (res) { return res.hasChanged; })
                                    .forEach(function (res) { console.log('Inlined sourceMappingURL as base64 in ' + res.file); });
                            });
                            process.chdir(__dirname);
                          " > inline-sourcemaps.js
                          npm i --no-save replace-in-file | true
                          node inline-sourcemaps.js
                        fi
            - run:
                name: Clearing sourcemaps
                command: find << parameters.pwa-path  >> -name *.map -type f -delete
      - when:
          condition: << parameters.cache-cordova-plugins >>
          steps:
            - restore_cache:
                << : *cache-key-cordova-plugins
      - run:
          name: Building
          command: |
            if [[ -f "scripts/build.sh" ]]; then
              scripts/build.sh
            else
              npm run ci:build
            fi
          no_output_timeout: 30m
      - when:
          condition: << parameters.cache-cordova-plugins >>
          steps:
            - save_cache:
                << : *cache-key-cordova-plugins
                paths:
                  - plugins
      - persist_to_workspace:
          root: .
          paths:
            - output/*.ipa
      - run:
          name: Deploying
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=$(mktemp)
            GOOGLE_APPLICATION_CREDENTIALS_JSON=$(echo $GOOGLE_APPLICATION_CREDENTIALS_B64 | base64 --decode)
            printf '%s\n' "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > $GOOGLE_APPLICATION_CREDENTIALS
            if [[ -f "scripts/deploy.sh" ]]; then
              scripts/deploy.sh
            else
              npm run ci:deploy
            fi
            rm -f $GOOGLE_APPLICATION_CREDENTIALS
      - common/notify
  android:
    parameters:
      attach-workspace:
        type: boolean
        default: false
      node-version:
        type: string
        default: ''
      install-ionic:
        type: boolean
        default: false
      install-cordova:
        type: boolean
        default: false
      key-name:
        type: string
        default: android-release.keystore
      dist-certs-repo-url:
        type: string
        default: ''
      ssh-permission-fingerprint:
        type: string
        default: ''
      custom-npm-login:
        type: boolean
        default: false
      pwa-path:
        type: string
        default: 'www'
      android-docker-tag:
        type: string
        default: '2022.09.2-node'
      skip-inline-sourcemaps:
        type: boolean
        default: false
      resource-class:
        type: string
        default: medium
    resource_class: << parameters.resource-class >>
    executor:
      name: android/android-docker
      tag: << parameters.android-docker-tag >>
    steps:
      - checkout
      - when:
          condition: << parameters.node-version >>
          steps:
            - node/install:
                node-version: << parameters.node-version >>
      - when:
          condition: << parameters.custom-npm-login >>
          steps:
            - run:
                name: Logging into custom NPM registry
                command: sudo npm install -g npm-cli-adduser && npm-cli-adduser
      - node/install-packages:
          cache-version: v1-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
      - common/install-android:
          install-ionic: << parameters.install-ionic >>
          install-cordova: << parameters.install-cordova >>
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: .
            - unless:
                condition: << parameters.skip-inline-sourcemaps >>
                steps:
                  - run:
                      name: Inlining sourcemaps
                      command: |
                        if [[ $CIRCLE_TAG != *-dist ]]; then
                          echo "
                            \"use strict\";
                            exports.__esModule = true;
                            var fs_1 = require(\"fs\");
                            var replace_in_file_1 = require(\"replace-in-file\");
                            process.chdir('www');
                            (0, fs_1.readdirSync)('.')
                                .filter(function (fname) { return fname.endsWith('.js') && (0, fs_1.existsSync)(fname + '.map'); })
                                .map(function (fname) { return { js: fname, jsmap: fname + '.map' }; })
                                .forEach(function (pair) {
                                (0, replace_in_file_1.replaceInFileSync)({
                                    files: pair.js,
                                    from: 'sourceMappingURL=' + pair.js + '.map',
                                    to: 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + (0, fs_1.readFileSync)(pair.jsmap).toString('base64')
                                })
                                    .filter(function (res) { return res.hasChanged; })
                                    .forEach(function (res) { console.log('Inlined sourceMappingURL as base64 in ' + res.file); });
                            });
                            process.chdir(__dirname);
                          " > inline-sourcemaps.js
                          npm i --no-save replace-in-file | true
                          node inline-sourcemaps.js
                        fi
            - run:
                name: Clearing sourcemaps
                command: find << parameters.pwa-path >> -name *.map -type f -delete
      - common/keystores:
          dist-certs-repo-url: << parameters.dist-certs-repo-url >>
          ssh-permission-fingerprint: << parameters.ssh-permission-fingerprint >>
          key-name: << parameters.key-name >>
      - gradle/with_cache:
          steps:
            - run:
                name: Building
                command: |
                  if [[ -f "scripts/build.sh" ]]; then
                    scripts/build.sh
                  else
                    npm run ci:build
                  fi
                no_output_timeout: 30m
      - persist_to_workspace:
          root: .
          paths:
            - output/*.apk
            - output/*.aab
      - run:
          name: Deploying
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=$(mktemp)
            GOOGLE_APPLICATION_CREDENTIALS_JSON=$(echo $GOOGLE_APPLICATION_CREDENTIALS_B64 | base64 --decode)
            printf '%s\n' "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > $GOOGLE_APPLICATION_CREDENTIALS
            if [[ -f "scripts/deploy.sh" ]]; then
              scripts/deploy.sh
            else
              npm run ci:deploy
            fi
            rm -f $GOOGLE_APPLICATION_CREDENTIALS
          no_output_timeout: 20m
      - common/notify
